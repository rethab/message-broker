#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Message Broker
\begin_inset Newline newline
\end_inset


\size large
Seminar Concurrent Programming in C
\begin_inset Newline newline
\end_inset

an der ZHAW am Standort Zürich
\end_layout

\begin_layout Author
Reto Hablützel
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Einleitung
\end_layout

\begin_layout Standard
Ein Message Broker ist eine zentrale Kommunikatinsschnittstelle für mehrere
 Programme die in verschiedenen Programmiersprachen implementiert sein können.
 Nebst der Möglichkeit heterogene Systeme zu verbinden, kann jedoch durch
 einen Message Broker auch eine verteilte Architektur realisiert werden
 indem jeder Client einen Teil der Funktionalität übernimmt.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Damit verschiedenste Programme miteinander kommunizieren können, bieten
 Message Broker typischerweise Schnittestellen mit verschiedenen Protokollen.
 Eines davon ist STOMP, welches sehr einfach gehalten und spezifisch für
 dynamische Programmiersprachen entwickelt wurde.Im Rahmen dieses Seminars
 habe ich mich deshalb für die Implementation von einem Message Broker entschied
en.
 Da das Kernthema Concurrency ist und ich nicht zu viel Zeit mit dem Protokoll
 verschwenden wollte, habe ich eine abgespeckte Version von STOMP als Protokoll
 implementiert.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Auf den Umfang der Funktionalität wird im Kapitel 2 näher eingegangen.
 Das Kapitel 3 beschreibt im wesentlichen das Subset von STOMP, das implementier
t wurde, die verschiedenen Komponenten, die im Message Broker existieren,
 sowie die Speicherstruktur.
 Im Kapitel 4 finden sich einige Details zur Implementation (insbesondere
 Locking) gefolgt vom Kapitel 5, welches die Verwendung vom Message Broker
 erklärt.
 Abgeschlossen wird die Dokumentation mit dem Kapitel 6 und einem persönlichen
 Rückblick.
\end_layout

\begin_layout Section
Funktionalität
\end_layout

\begin_layout Subsection
Verbindungsauf- und abbau
\end_layout

\begin_layout Standard
Jede Verbindung zwischen einem Client und dem Message Broker beginnt mit
 einem kurzen Handshake.
 Der Client teilt dem Message Broker seinen Namen mit und der Message Broker
 bestätigt den Empfang.
 Sobald der Client die Kommunikation beenden will, teilt er dies dem Message
 Broker mit einer Disconnect Nachricht mit und kriegt wiederum eine Bestätigung.
\end_layout

\begin_layout Subsection
Nachrichten empfangen
\end_layout

\begin_layout Standard
Ein verbundener Client kann einen Topic abonnieren und kriegt so vom Message
 Broker sämtliche Nachrichten zu diesem Topic zugestellt.
 Topics werden dynamisch erstellt, sobald sicher der erste Client dafür
 interessiert.
 Ein Client, der Nachrichten von einem Topic abonniert hat, wird Subscriber
 genannt.
\end_layout

\begin_layout Subsection
Nachrichten senden
\end_layout

\begin_layout Standard
Ein verbundener Client kann Nachrichten zu einem bestimmten Topic an den
 Message Broker senden.
 Ein solcher Client wird als Publisher bezeichnet.
\end_layout

\begin_layout Section
Konzept
\end_layout

\begin_layout Subsection
Protokoll
\end_layout

\begin_layout Standard
Für die Umsetzung wurde eine abgespeckte Version vom STOMP
\begin_inset Foot
status open

\begin_layout Plain Layout
https://stomp.github.io/
\end_layout

\end_inset

 Protokoll implementiert.
 Die implementierten Kommandos werden unter aufgelistet.
 Auf sämtliche Kommandos vom Client kann der Server mit ERROR antworten,
 falls etwas schief gelaufen ist.
 Jedes Kommando hat die folgende Struktur:
\end_layout

\begin_layout Standard
Auf der ersten Zeile steht der Name des Kommandos in Grossbuchstaben.
 Auf folgenden Zeilen stehen durch Doppelpunkt separierte Key-Value Paare,
 welche Header Werte darstellen.
 Nach den Header Werten folgt der Content, welcher durch eine Leerzeile
 vom Header getrennt ist.
 Das Ende eines Kommandos markiert wiederum eine Leerzeile gefolgt vom Null-Byte
 (hier ^@):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

COMMAND
\end_layout

\begin_layout Plain Layout

key: value
\end_layout

\begin_layout Plain Layout

key: value
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Content
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

^@
\begin_inset Caption Standard

\begin_layout Plain Layout
Struktur eines Kommandos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
CONNECT
\end_layout

\begin_layout Standard
Wird vom Client an den Message Broker zum Beginn der Verbindung gesendet.
 Hat einen zwingenden Header 'login', welcher den Client identifiziert.
 Hat keinen Content.
 Sobald der Message Broker das Kommando den Client aufgenommen hat, sendet
 er zur Bestätigung CONNECTED.
\end_layout

\begin_layout Subsubsection
CONNECTED
\end_layout

\begin_layout Standard
Wird vom Message Broker als Antwort auf das CONNECT Kommando versendet falls
 die Verbindung erfolgreich erstellt werden konnte.
 Hat weder Header noch Content.
\end_layout

\begin_layout Subsubsection
ERROR
\end_layout

\begin_layout Standard
Wird vom Message Broker in verschiedenen Szenarien an den Client gesendet
 um einen Fehler mitzuteilen.
 Hat einen zwingenden Header 'message', der die Fehlermeldung enthält und
 keinen Content.
\end_layout

\begin_layout Subsubsection
SEND
\end_layout

\begin_layout Standard
Wird von einem Client an den Message Broker gesendet um einen Nachricht
 zuzustellen.
 Hat einen zwingenden Header 'topic', der den Topic identifiziert, an den
 die Nachricht gesendet wird.
 Im Content steht der eigentliche Inhalt der Nachricht.
\end_layout

\begin_layout Subsubsection
SUBSCRIBE
\end_layout

\begin_layout Standard
Wird von einem Client an den Message Broker gesendet um einen Topic zu abonniere
n.
 Hat einen zwingenden Header 'destination', welcher den Topic identifiziert.
 Hat keinen Content.
\end_layout

\begin_layout Subsubsection
MESSAGE
\end_layout

\begin_layout Standard
Wird vom Message Broker an den Client gesendet um eine Nachricht zuzustellen.
 Hat einen zwingenden Header 'destination', der den Topic identifiziert.
 Die Nachricht ist im Content.
\end_layout

\begin_layout Subsubsection
DISCONNECT
\end_layout

\begin_layout Standard
Wird vom Client an den Message Broker gesendet um die Verbindung zu beenden.
 Hat weder Header noch Content.
\end_layout

\begin_layout Subsubsection
RECEIPT
\end_layout

\begin_layout Standard
Wird vom Message Broker an den Client gesendet, sobald der Message Broker
 den DISCONNECT akzeptiert hat.
 Hat weder Header noch Content.
\end_layout

\begin_layout Subsection
Speicherstruktur
\end_layout

\begin_layout Standard
Auf dem Server existieren zwei globale Listen: Die eine enthält alle Topics
 verknüpft mit einer Liste von Subscribern zum jeweiligen Topic.
 Die zweite Liste enthält alle Messages, die vom Message Broker empfangen
 wurden.
 Zudem enthält jede Nachricht eine Liste von Statistiken.
 Eine Statstik ist eine Tripel aus Subscriber, Anzahl versuchter Zustellungen
 und einen Timestamp der letzten erfolglosen Zustellung.
 Diese wird verwendet um zu bestimmen, welche Subscriber die Nachricht erhalten
 haben und ob ein erneuter Versuch der Zustellung gemacht werden soll.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Topics:
\end_layout

\begin_layout Plain Layout

  - topic1
\end_layout

\begin_layout Plain Layout

      - subscriber1
\end_layout

\begin_layout Plain Layout

      - subscriber2
\end_layout

\begin_layout Plain Layout

  - topic2
\end_layout

\begin_layout Plain Layout

      - subscriber1
\end_layout

\begin_layout Plain Layout

      - subscriber3
\end_layout

\begin_layout Plain Layout

      ..
\end_layout

\begin_layout Plain Layout

  ..
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Messages:
\end_layout

\begin_layout Plain Layout

  - message1
\end_layout

\begin_layout Plain Layout

      - topic
\end_layout

\begin_layout Plain Layout

      - content
\end_layout

\begin_layout Plain Layout

      - statistic1
\end_layout

\begin_layout Plain Layout

          - last fail
\end_layout

\begin_layout Plain Layout

          - nattempts
\end_layout

\begin_layout Plain Layout

          - subscriber1
\end_layout

\begin_layout Plain Layout

      - statistic2
\end_layout

\begin_layout Plain Layout

          - last fail
\end_layout

\begin_layout Plain Layout

          - nattempts
\end_layout

\begin_layout Plain Layout

          - subscriber2
\end_layout

\begin_layout Plain Layout

  - message2
\end_layout

\begin_layout Plain Layout

      ..
\begin_inset Caption Standard

\begin_layout Plain Layout
Speicherstruktur
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Einfügen einer neuen Nachricht
\end_layout

\begin_layout Standard
Wenn ein Client eine Nachricht an den Message Broker sendet, kopiert er
 die Liste von Subscribern von dem Topic, an den die Nachricht versendet
 wurde.
 Dann wird ein neuer Eintrag in der Liste der Nachrichten erstellt und die
 Subscriber werden in eine Liste von Statistiken überführt.
\end_layout

\begin_layout Subsection
Komponenten
\end_layout

\begin_layout Subsubsection
Handler
\end_layout

\begin_layout Standard
Der Handler erstellt pro Socket - Verbindung einen neuen Thread.
 Dies ist der Broker.
\end_layout

\begin_layout Subsubsection
Broker
\end_layout

\begin_layout Standard
Pro verbundenem Client existiert ein Thread, der den Broker repräsentiert.
 Der Broker hält eine TCP Verbindung aufrecht und ist stets bereit, Kommandos
 zu lesen.
 Der Broker fügt den Client zur Liste der Subscriber, wenn er sich für einen
 Topic interessiert und nimmt eine Nachricht entgegen, wenn er eine sendet,
 und reiht diese in die Liste der Nachrichten.
\end_layout

\begin_layout Subsubsection
Distributor
\end_layout

\begin_layout Standard
Der Distributor prüft ständig die Liste von Messages nach Nachrichten, die
 zugestellt werden sollen.
 Jedes Mal, wenn eine Nachricht erfolgreich zugestellt wurde, wird den Zähler
 'nattempts' um eins erhöht.
 Falls die Zustellung fehlschlägt, wird der Timestamp 'last fail' gesetzt.
 Mit diesem Timestamp kann der Distributor auch feststellen, ob er bereits
 einen erneuten Versuch zur unternehmen soll.
\end_layout

\begin_layout Subsubsection
Garbage Collector
\end_layout

\begin_layout Standard
Der Garbage Collector räumt Statistiken, Nachrichten und Subscriber auf.
 Mittels bestimmter Regeln entscheidet der Garbage Collector, ob ein Eintrag
 in der Liste der Statistiken zu einer Nachricht gelöscht werden kann (z.B.
 Nachricht wurde erfolgreich zugestellt oder Subscriber hat die Verbindung
 beendet).
 Sobald eine Nachricht keine Statistiken mehr hat, kann die gesamte Nachricht
 abgeräumt werden und aus der Liste der Messages gelöscht werden.
 Wenn ein Subscriber in keiner der Liste der Statistiken mehr auftaucht,
 kann auch er gelöscht werden.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename components.png
	width 50page%

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Locking
\end_layout

\begin_layout Standard
Damit das Programm auch mit mehreren interagierenden Threads stets in einem
 konsistenten Zustand bleibt, wurden die beiden globalen Listen mit Locks
 geschützt.
 Die folgenden Tabellen zeigt links die Resourcen, die geschützt werden
 müssen und in den Spalten 2-n die Aktionen, die diese Resourcen verändern.
 Mit R, W und M wird dann angedeutet, welcher Lock für eine bestimmte Aktion
 gehaltet werden muss.
\end_layout

\begin_layout Itemize
R: Es wurde ein Read Write Lock verwendet und dessen Read Lock muss gehalten
 werden
\end_layout

\begin_layout Itemize
W: Es wurde ein Read Write Lock verwendet und dessen Write Lock muss gehalten
 werden
\end_layout

\begin_layout Itemize
M: Es wurde eine Mutex verwendet, welche gehalten werden muss
\end_layout

\begin_layout Standard
Dabei ist es wichtig, dass die Locks top-to-bottom geholt werden.
 Wenn also eine Aktion zwei oder mehrere Locks für eine Aktion benötigt,
 muss zuerst der Lock gehalten werden, der oben in der Liste ist.
 Würde nämlich ein Thread die Locks von oben halten wollen und ein anderer
 von unten, könnte ein Deadlock auftreten.
\end_layout

\begin_layout Subsubsection
Broker
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resource
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topic erstellen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subscriber hinzufügen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht hinzufügen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topics Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Subscriber Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messages Liste
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statistik Liste
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statistik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Garbage Collector
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="8">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="5page%">
<column alignment="left" valignment="top" width="7page%">
<column alignment="left" valignment="top" width="7page%">
<column alignment="left" valignment="top" width="5page%">
<column alignment="left" valignment="top" width="5page%">
<column alignment="left" valignment="top" width="6page%">
<column alignment="left" valignment="top" width="6page%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resource
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topic erstellen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subscriber hinzufügen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subscriber entfernen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Statistik löschen prüfen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Statistik löschen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht löschen prüfen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht löschen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topics Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R / W *
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Subscriber Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messages Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statistik Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statistik
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

* Wenn ein Subscriber hinzugefügt werden soll, wird zuerst mit einem Read
 Lock auf der Liste der Topics geprüft, ob der Topic bereits existiert.
 Wenn der Topic noch nicht existiert, wird der Write Lock auf der Liste
 der Topics angefordert und die Existenz wird nochmal geprüft.
 Falls er noch immer nicht existiert, wird der Topic angelegt.
\end_layout

\begin_layout Subsubsection
Distributor
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resource
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht zustellen prüfen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht zustellen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messages Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statistik Liste
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Statstik
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Subscriber / Client
\end_layout

\begin_layout Standard
Nebste den diversen Locks für die beiden Listen, existieren noch drei Mutexe
 pro Client.
 Je eine wird für das Lese- und Schreib-Ende vom Socket verwendet und die
 dritte für ein Dead-Flag, welches auf 1 gesetzt wird, falls der Client
 nicht mehr erreichbar ist.
 Dies ist für den Garbage Collector auch ein Indikator, dass der Subscriber
 abgeräumt werden kann, sobald er auch in keiner Statistik mehr auftaucht.
\end_layout

\begin_layout Subsection
Dateien
\end_layout

\begin_layout Standard
Sämtlicher Produktivcode ist im Verzeichnis src.
 Es folgt eine Auflistung der Dateien und kurze Beschreibung von deren Inhalt.
\end_layout

\begin_layout Itemize
server.c: Beinhaltet main-Funktion vom Message Broker.
 Hier werden alle Komponenten gestartet und es wird auf neue Clients gewartet.
\end_layout

\begin_layout Itemize
broker.c/broker.h: Funktionalität vom Broker.
 Die Funktion handle_client ist Einstiegspunkt für den Broker pro Client.
\end_layout

\begin_layout Itemize
distributor.c/distributor.h: Funktionalität vom Distributor.
 Die Funktion distributor_main_loop wird dem Distributor - Thread als Startfunkt
ion übergeben und versucht mittels der anderen Funktionen in der Datei die
 Nachrichten zuzustellen.
\end_layout

\begin_layout Itemize
gc.c/gc.h: Funktionalität vom Garbage Collector.
 Die Funktion gc_main_loop wird dem Garbage Collector - Thread als Startfunktion
 übergeben und führt die Garbage Collector Funktion kontinuierlich aus.
\end_layout

\begin_layout Itemize
list.c/list.h: Eine Implementation einer verketteten Liste und einiger Operationen.
 Diese Liste wird überall verwendet (z.B.
 Liste von Topics).
\end_layout

\begin_layout Itemize
socket.c/socket.h: Ein High-Level Interface für Sockets.
 Im Gegensatz zu herkömmlichen Funktionen, die mit Byte-Array Buffer über
 einen Socket Daten versenden, kann mit diesen Funktionen komfortabel ein
 ganzes STOMP - Kommando über den Socket versendet bzw.
 empfangen werden.
\end_layout

\begin_layout Itemize
stomp.c/stomp.h: Beinhaltet Funktionen zum Parsen von Char - Arrays in ein
 STOMP - Kommando (struct) und wieder zurück.
 Diese Funktionen werden verwendet, um Kommandos über den Socket zu versenden.
\end_layout

\begin_layout Itemize
topic.c/topic.h: Beinhaltet die zentralen Strukturen und Funktionen zum operieren
 mit den beiden zentralen Listen von Messages und Topics.
 So gibt es zum Beispiel eine Funktion um einen Subscriber einem Topic hinzuzufü
gen.
\end_layout

\begin_layout Subsection
Testing
\end_layout

\begin_layout Standard
Das ganze Programm wurde testgetrieben entwickelt und mit den Coverage Tools
 von GCC wurde kontinuierlich die Testabdeckung überwacht.
 Somit konnte schlussendlich eine hohe Abdeckung von über 97% erreicht werden.
 Als Test-Framework wurde cunit
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.cunit.sourceforge.net
\end_layout

\end_inset

 verwendet.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Summary coverage rate:
\end_layout

\begin_layout Plain Layout

  lines......: 97.9% (967 of 988 lines)
\end_layout

\begin_layout Plain Layout

  functions..: 97.2% (69 of 71 functions)
\begin_inset Caption Standard

\begin_layout Plain Layout
Testabdeckung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Verwendung
\end_layout

\begin_layout Standard
Dieses Kapitel beschreibt die Anwendung des Programms.
 Der Hauptteil ist der Message Broker selbst, welcher grundsätzlich durch
 das oben beschriebene Protokoll verwendet werden kann.
 Im Rahmen dieser Seminararbeit wurde jedoch auch ein Testclient implementiert,
 der die Funktionalität demonstriert.
\end_layout

\begin_layout Subsection
Kompilieren und Tests ausführen
\end_layout

\begin_layout Standard
Als Buildsystem wurde make verwendet und die Tests basieren auf cunit.
 Letzteres muss installiert sein, um die Tests auszuführen.
\end_layout

\begin_layout Standard
Um den Code für die Tests zu kompilieren muss folgender Befehl ausgeführt
 werden.
 Dieser wird die Tests auch direkt ausführen und einen Report ausgeben.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ make test
\begin_inset Caption Standard

\begin_layout Plain Layout
Tests kompilieren und ausführen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Produktivecode wird mit folgendem Befehl erzeugt.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ make
\begin_inset Caption Standard

\begin_layout Plain Layout
Produktivecode kompilieren
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dies erstellt die beiden Binaries run und test im Hauptverzeichnis.
\end_layout

\begin_layout Subsection
Message Broker starten
\end_layout

\begin_layout Standard
Mit folgendem Befehl kann der Message Broker auf dem Standard Port gestartet
 werden.
 Welcher das ist, wird auf der Konsole ausgegeben.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ ./run
\begin_inset Caption Standard

\begin_layout Plain Layout
Message Broker auf Standard Port
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Falls ein anderer Port verwendet werden soll, kann dieser als Argument mitgegebe
n werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ ./run 44554
\begin_inset Caption Standard

\begin_layout Plain Layout
Message Broker mit bestimmten Port
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Testclient starten
\end_layout

\begin_layout Standard
Auch der Testclient kann ohne Argumente aufgerufen werden und wird sich
 dann mit dem Standard Port vom Message Broker verbinden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ ./test
\begin_inset Caption Standard

\begin_layout Plain Layout
Testclient mit Standard Argumenten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zusätzlich bietet der Testclient einige Argumente um das Verhalten zu Steuern.
 Wichtig ist, dass alle Argumente in dieser Reihenfolge angegeben werden
 müssen.
\end_layout

\begin_layout Itemize
hostname: Der Hostname vom Message Broker
\end_layout

\begin_layout Itemize
port: Der Port vom Message Broker
\end_layout

\begin_layout Itemize
name: Der Name, der für das Login verwendet werden soll.
\end_layout

\begin_layout Itemize
nmsgs: Die Anzahl Nachrichten, die an den Broker versendet werden sollen.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

message-broker$ ./test localhost 44554 hmuster 33
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Testclient mit bestimmten Argumenten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Rückblick
\end_layout

\begin_layout Subsection
Test Driven Development
\end_layout

\begin_layout Standard
Ich wollte dieses Projekt verwenden, um die testgetriebene Entwicklung auszuprob
ieren.
 Deshalb habe ich schon von beginn an immer zuerst Unit - Tests geschrieben.
 Zugegebenermassen habe ich jedoch bei den ersten Funktionen (vor allem
 stomp.c) zuerst die Header-Datei geschrieben und dann dagegen getestet.
 Als ich bei späteren Dateien (z.B.
 distributor.c) jedoch überhaupt kein Interface hatte, gegen das ich testen
 konnte, habe ich gemerkt, wie sich auch die Signatur der Methoden verbessert
 hat.
 So habe ich Zeit gespart, indem ich beim Implementieren der Funktionen
 bereits wusste, was diesen tun sollen und sehr wenig unnötige Funktionlität
 hinzukam.
\end_layout

\begin_layout Subsection
C Programmierung
\end_layout

\begin_layout Standard
Da ich zusammen mit einem Kommilitonen bereits in einem früheren Semester
 eine Implementation von MapReduce
\begin_inset Foot
status open

\begin_layout Plain Layout
http://en.wikipedia.org/wiki/MapReduce
\end_layout

\end_inset

 in Java implementiert habe, war für mich Concurrency an sich nichts neues.
 In diesem Projekt kamen jedoch die Finessen von C hinzu und es hat sich
 herausgestellt, dass dies weit mehr ist als das 'der Programmierer ist
 für die Speicherverwaltung verantwortlich'.
 So habe ich zu Beginn einige Male Speicher auf dem Stack alloziert und
 das hat im Unit - Test auch so funktioniert.
 Erst als dann die Funktion in einem komplexeren Szenario verwendet wurde,
 war die Speicheradresse plötzlich ungültig.
 Zudem musste ich auf dem harten Weg erfahren, dass der Speicher, der via
 malloc alloziert wird, nicht zwingend mit Nullen gefüllt ist.
 Auch hier hat eine Funktion im Unit - Test funktioniert, da der Speicher
 angeblich initial tatsächlich überall Nullen hat, aber in einem komplexeren
 Szenario hatte die malloc Funktion nicht mehr frisch allozierten Speicher
 gelifert, sondern jenen, der zuvor vom gleichen Prozess freigegeben wurde.
 Wie ich dann erfahren habe, ist gerade in diesen Fällen der Speicher nicht
 mit Nullen gefüllt.
 Diesen Bug konnte ich schlussendlich mit folgendem Code auch in einem Unit-Test
 nachstellen.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int *dummy = malloc(1024 * sizeof(int));
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 1024; i++)
\end_layout

\begin_layout Plain Layout

   dummy[i] = 1;
\end_layout

\begin_layout Plain Layout

free(dummy);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// eigentlicher Testcode
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Testsetup für Bug, der nur auftritt, wenn malloc keine Nullen zurückgibt
 (test/stomp-test.c test_create_command_strcatbug)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fazit
\end_layout

\begin_layout Standard
Dieses Seminar hat mich weit mehr Zeit gekostet als vorgesehen.
 Einerseits war das absehbar dadurch, dass ich die Aufgabestellung selbstdefinie
rt und umfangreicher als die vorgegbenen war.
 Andererseits habe ich jedoch auch vor allem Anfang viele Fehler programmiert,
 weil ich in C nicht so fit bin.
 Mit der Zeit hat sich dies jedoch gebessert und ich wurde immer produktiver
 und mein Code wurde - auch durch die konsequentere Umsetzung von TDD -
 immer robuster.
\end_layout

\begin_layout Standard
Alles in Allem hat es mir Spass gemacht diese Arbeit zu schreiben und ich
 bin mit meinem Message Broker zufrieden.
\end_layout

\begin_layout Section
Anhang
\end_layout

\begin_layout Subsection
Begriffe
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="70col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Begriff
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erklärung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topic
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachrichten werden in Themen gruppiert.
 Clients abonnieren Themen und kriegen so die Nachrichten zugestellt, die
 an dieses Thema gesendet werden.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Publisher
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein Client, der Nachrichten sendet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subscriber
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein Client, der an Nachrichten von einem Topic interessiert ist
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STOMP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Simple Text Oriented Messaging Protocol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TDD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test Driven Development / testgetriebene Entwicklung
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
